type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.UUID;

    public class Seat {
        private int row;
        private int column;
        private int price;
        @JsonIgnore
        private String token;
        @JsonIgnore
        private boolean purchase;

        public Seat() {
        }

        public Seat(int row, int column, int price) {
            this.token = String.valueOf(UUID.randomUUID());
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public void setPurchase(boolean purchase) {
            this.purchase = purchase;
        }

        public boolean isPurchase() {
            return purchase;
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/model/ReturnTicket.java
  visible: true
  text: |
    package cinema.model;

    public class ReturnTicket {
        private Ticket returned_ticket;

        public ReturnTicket(Ticket returned_ticket) {
            this.returned_ticket = returned_ticket;
        }

        public Ticket getReturned_ticket() {
            return returned_ticket;
        }

        public void setReturned_ticket(Ticket returned_ticket) {
            this.returned_ticket = returned_ticket;
        }
    }
  learner_created: true
- name: src/cinema/model/Cinema.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import org.springframework.stereotype.Component;

    @Component
    public class Cinema {
        private int total_rows;
        private int total_columns;

        @JsonInclude()
        private Seat[] available_seats;

        public Cinema() {
            this.total_rows = 9;
            this.total_columns = 9;
            available_seats = new Seat[total_rows * total_columns];
            initSeats();
        }

        private void initSeats() {
            int row = 1;
            int column = 1;
            int price = 10;
            for (int i = 0; i < total_rows * total_columns ; i++) {
                if (row > 4) {
                    price = 8;
                }
                available_seats[i] = new Seat(row, column, price);
                column++;
                if (column > 9) {
                    column = 1;
                    row++;
                }
            }
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public Seat[] getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(Seat[] available_seats) {
            this.available_seats = available_seats;
        }



    //    @JsonInclude()
    //    @JsonIgnore
    //    private Purchase[] available_seats;
    //
    //    public Cinema() {
    //        this.total_rows = 9;
    //        this.total_columns = 9;
    //        available_seats = new Purchase[total_rows * total_columns];
    //        initSeats();
    //    }
    //
    //    private void initSeats() {
    //        int row = 1;
    //        int column = 1;
    //        int price = 10;
    //        for (int i = 0; i < total_rows * total_columns ; i++) {
    //            if (row > 4) {
    //                price = 8;
    //            }
    //            available_seats[i] = new Purchase(new Ticket(row, column, price));
    //            column++;
    //            if (column > 9) {
    //                column = 1;
    //                row++;
    //            }
    //        }
    //    }
    //
    //    public int getTotal_rows() {
    //        return total_rows;
    //    }
    //
    //    public void setTotal_rows(int total_rows) {
    //        this.total_rows = total_rows;
    //    }
    //
    //    public int getTotal_columns() {
    //        return total_columns;
    //    }
    //
    //    public void setTotal_columns(int total_columns) {
    //        this.total_columns = total_columns;
    //    }
    //
    //    public Purchase[] getPurchase() {
    //        return available_seats;
    //    }
    //
    //    public void setPurchase(Purchase[] purchase) {
    //        this.available_seats = purchase;
    //    }
    }
  learner_created: true
- name: src/cinema/model/Response.java
  visible: true
  text: |
    package cinema.model;

    public class Response {
        private String error;

        public Response(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/model/DTO/TicketDTO.java
  visible: true
  text: |
    package cinema.model.DTO;

    public class TicketDTO {
        private int row;
        private int column;

        public TicketDTO() {
        }

        public TicketDTO(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/controler/CinemaControler.java
  visible: true
  text: |
    package cinema.controler;

    import cinema.model.Cinema;
    import cinema.model.DTO.TicketDTO;
    import cinema.model.DTO.TokenDTO;
    import cinema.service.CinemaService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class CinemaControler {

        private CinemaService cinemaService;

        @Autowired
        public CinemaControler(CinemaService cinemaService) {
            this.cinemaService = cinemaService;
        }

        @GetMapping("/seats")
        public Cinema getCinema() {
            return cinemaService.getCinema();
        }

        @PostMapping("/purchase")
        public ResponseEntity purchaseSeat(@RequestBody TicketDTO seatDTO) {
            return cinemaService.purchaseTicket(seatDTO);
        }

        @PostMapping("return")
        public ResponseEntity returnTicket(@RequestBody TokenDTO tokenDTO) {
            return  cinemaService.returnTicket(tokenDTO);
        }

    }
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.*;
    import cinema.model.DTO.TicketDTO;
    import cinema.model.DTO.TokenDTO;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    @Service
    public class CinemaService {

        private Cinema cinema;

        @Autowired
        public CinemaService(Cinema cinema) {
            this.cinema = cinema;
        }

        public Cinema getCinema() {
            return cinema;
        }


        public ResponseEntity purchaseTicket(TicketDTO seatDTO) {
            for (Seat seat: cinema.getAvailable_seats() ) {
                if (seat.getRow() == seatDTO.getRow() && seat.getColumn() == seatDTO.getColumn()) {
                    if (seat.isPurchase()) {
                        return new ResponseEntity(new Response("The ticket has been already purchased!"), HttpStatus.BAD_REQUEST);
                    } else {
                        seat.setPurchase(true);
                        return ResponseEntity.ok(new Purchase(seat.getToken(), new Ticket(seat.getRow(), seat.getColumn(), seat.getPrice())));
                    }
                }
            }
            return new ResponseEntity(new Response("The number of a row or a column is out of bounds!"), HttpStatus.BAD_REQUEST);
        }

        public ResponseEntity returnTicket(TokenDTO tokenDTO) {
            for (Seat seat: cinema.getAvailable_seats()) {
                if (seat.getToken().equals(tokenDTO.getToken()) && seat.isPurchase()) {
                    seat.setPurchase(false);
                    return ResponseEntity.ok(new ReturnTicket(new Ticket(seat.getRow(), seat.getColumn(), seat.getPrice())));
                }
            }
            return new ResponseEntity(new Response("Wrong token!"), HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/model/Purchase.java
  visible: true
  text: |
    package cinema.model;


    public class Purchase {
        private String token;
        private Ticket ticket;

        public Purchase() {
        }

        public Purchase(String token, Ticket ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public Ticket getTicket() {
            return ticket;
        }

        public void setTicket(Ticket ticket) {
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/model/DTO/TokenDTO.java
  visible: true
  text: |
    package cinema.model.DTO;

    public class TokenDTO {
        private String token;

        public TokenDTO() {
        }

        public TokenDTO(String token) {
            this.token = token;
        }

        public String getToken() {
            return token;
        }
    }
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Ticket {
        private int row;
        private int column;
        private int price;
        @JsonIgnore
        private boolean purchase;

        public Ticket() {
        }

        public Ticket(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public void setPurchase(boolean purchase) {
            this.purchase = purchase;
        }

        public boolean isPurchase() {
            return purchase;
        }
    }
  learner_created: true
- name: src/cinema/model/Stats.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 24 Sep 2021 11:33:17 UTC
record: 4
